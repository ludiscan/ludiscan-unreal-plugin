/**
 * API Documentation
 * The API description
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIHeatmapTaskDto.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIHeatmapTaskDto::StatusEnum& Value)
{
	switch (Value)
	{
	case OpenAPIHeatmapTaskDto::StatusEnum::Pending:
		return TEXT("pending");
	case OpenAPIHeatmapTaskDto::StatusEnum::Processing:
		return TEXT("processing");
	case OpenAPIHeatmapTaskDto::StatusEnum::Completed:
		return TEXT("completed");
	case OpenAPIHeatmapTaskDto::StatusEnum::Failed:
		return TEXT("failed");
	case OpenAPIHeatmapTaskDto::StatusEnum::UnknownDefaultOpenApi:
		return TEXT("11184809");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIHeatmapTaskDto::StatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIHeatmapTaskDto::EnumToString(const OpenAPIHeatmapTaskDto::StatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIHeatmapTaskDto::StatusEnum& Value)
{
	static TMap<FString, OpenAPIHeatmapTaskDto::StatusEnum> StringToEnum = { 
		{ TEXT("pending"), OpenAPIHeatmapTaskDto::StatusEnum::Pending },
		{ TEXT("processing"), OpenAPIHeatmapTaskDto::StatusEnum::Processing },
		{ TEXT("completed"), OpenAPIHeatmapTaskDto::StatusEnum::Completed },
		{ TEXT("failed"), OpenAPIHeatmapTaskDto::StatusEnum::Failed },
		{ TEXT("11184809"), OpenAPIHeatmapTaskDto::StatusEnum::UnknownDefaultOpenApi }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIHeatmapTaskDto::EnumFromString(const FString& EnumAsString, OpenAPIHeatmapTaskDto::StatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIHeatmapTaskDto::StatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIHeatmapTaskDto::StatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIHeatmapTaskDto::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("taskId")); WriteJsonValue(Writer, TaskId);
	Writer->WriteIdentifierPrefix(TEXT("project")); WriteJsonValue(Writer, Project);
	if (Session.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("session")); WriteJsonValue(Writer, Session.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("stepSize")); WriteJsonValue(Writer, StepSize);
	Writer->WriteIdentifierPrefix(TEXT("zVisible")); WriteJsonValue(Writer, ZVisible);
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	if (Result.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("result")); WriteJsonValue(Writer, Result.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("createdAt")); WriteJsonValue(Writer, CreatedAt);
	Writer->WriteIdentifierPrefix(TEXT("updatedAt")); WriteJsonValue(Writer, UpdatedAt);
	Writer->WriteObjectEnd();
}

bool OpenAPIHeatmapTaskDto::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("taskId"), TaskId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("project"), Project);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("session"), Session);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("stepSize"), StepSize);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("zVisible"), ZVisible);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("result"), Result);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("createdAt"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updatedAt"), UpdatedAt);

	return ParseSuccess;
}

}
